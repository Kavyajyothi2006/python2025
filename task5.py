# -*- coding: utf-8 -*-
"""task5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LG-zlCMIUN4CPAJheVkYdsvrc1Urah_h
"""

class kavya:
  def __init__(self, name, age):
    self.name = name
    self.age = age
  def cat(self):
    print(f"Hello, my name is {self.name} and I am {self.age} years old.")
    print("i love cats and dog ")

kavya1 = kavya("Affu", 20)
kavya1.cat()



class Vehicle:
  def __init__(self,name,model,year):
    self.name=name
    self.model=model
    self.year=year
  def info(self):
    print(f"Name: {self.name}\nModel: {self.model}\nyeat: {self.year}")
class Car(Vehicle):
  def __init__(self,name,model,year,color):
    super().__init__(name,model,year)
    self.color=color
  def info(self):
    super().info()
    print(f"Color: {self.color}")
car=Car("Audi","A3","2023","red")
car.info()



class Vehicle:
  def __init__(self,brand,model):
    self.brand=brand
    self.model=model
  def info(self):
    print(f"Brand: {self.brand}\nModel: {self.model}")
class Car(Vehicle):
  def __init__(self,brand,model,color):
    super().__init__(brand,model)
    self.color=color
  def info(self):
    super().info()
    print(f"Color: {self.color}")
car=Car("toyota","corolla","red")
car.info()

class bank_account:
  def __init__(self,account_number,balance=0):
    self.account_number=account_number
    self.balance=balance
  def deposit(self,amount):
    self.balance+=amount
    print(f"Deposited ${amount}. New balance is ${self.balance}")
  def withdraw(self,amount):
    if amount<=self.balance:
      self.balance-=amount
      print(f"Withdrew ${amount}. New balance is ${self.balance}")
    else:
      print("Insufficient funds")
  def check_balance(self):
    print(f"Account balance for account number {self.account_number}: ${self.balance}")
account = bank_account("123456789")
account.deposit(1000)
account.withdraw(500)
account.check_balance()
account.withdraw(1500)
account.check_balance()

class Animal:
  def speak(self):
    print("i'm an Animal")

class Dog(Animal):
  def speak(self):
    print("I bark")

d = Dog()
d.speak()

class shape:
  def area(self):
    pass
class rectangle(shape):
  def __init__(self,length,width):
    self.length=length
    self.width=width
  def area(self):
    return self.length*self.width
class circle(shape):
  def __init__(self,radius):
    self.radius=radius
  def area(self):
    return 3.14*self.radius*self.radius
shapes=[rectangle(4,6),circle(4)]
for shape in shapes:
  print(shape.area())

class Animal:
    def __init__(self, name):
        self._name = name
    def get_name(self):
        return self._name
    def set_name(self, name):
        self._name = name
    def speak(self):
        return f"{self._name} makes a sound."
class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)
        self._breed = breed
    def get_breed(self):
        return self._breed
    def set_breed(self, breed):
        self._breed = breed
    def fetch(self):
        return f"{self.get_name()} is fetching the ball"
dog = Dog("Buddy", "Golden Retriever")
print(dog.get_name())
dog.set_name("Max")
print(dog.get_name())
print(dog.get_breed())
dog.set_breed("Labrador")
print(dog.get_breed())
print(dog.fetch())

class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        return f"{self.name} makes a sound."
class Flyable:
    def fly(self):
        return "I can fly!"
class Bird(Animal, Flyable):
    def __init__(self, name, species):
        Animal.__init__(self, name)
        self.species = species
    def describe(self):
        return f"{self.name} is a {self.species} bird"
bird = Bird("Eagle", "Golden Eagle")
print(bird.speak())
print(bird.fly())
print(bird.describe())
